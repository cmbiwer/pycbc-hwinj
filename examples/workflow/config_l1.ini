[workflow]
; options for the workflow generator
file-retention-level = all_files

[workflow-ifos]
; what detectors to analyze

[workflow-schedule]
; options for workflow generator to use for checking the schedule file

[executables]
; path to executables to use in workflow
check_exc = ${which:pycbc_check_frame_excitation}
check_bitmask = ${which:pycbc_check_frame_bitmask}
check_segdb = ${which:ligolw_segment_query_dqsegdb}
cat_frame_data = ${which:pycbc_cat_frame_data}
cat_segdb_data = ${which:pycbc_cat_segdb_data}
make_table = ${which:pycbc_make_hwinj_table}

[check_exc]
; check excitations section

; check excitations from CAL-INJ_TRANSIENT

[check_exc-l1_cal_inj_transient_output]
frame-type = L1_R
channel-name = L1:CAL-INJ_TRANSIENT_OUTPUT

; check excitations from CAL-PINJX_TRANSIENT

[check_exc-l1_cal_pinjx_transient_output]
frame-type = L1_R
channel-name = L1:CAL-PINJX_TRANSIENT_OUTPUT

[check_bitmask]
; check bitmask segments section
; for ODC configuration file see: https://redoubt.ligo-wa.caltech.edu/websvn/filedetails.php?repname=gds&path=%2Ftrunk%2FMonitors%2FSegGener%2Fpars%2FSegGener_ODC_LHO.osc
; for CAL-INJ bit definitions see: https://lhocds.ligo-wa.caltech.edu/exports/odc/cal-inj.html
; for CAL-PINJX bit definitions see: https://lhocds.ligo-wa.caltech.edu/exports/odc/cal-pinjx.html
; for DCS-CALIB_STATE_VECTOR_C01 bit definitions see: https://wiki.ligo.org/LSC/JRPComm/ObsRun1

; check filterbank on for CAL-INJ_TRANSIENT

[check_bitmask-l1_cal_inj_transient_swstat_input]
frame-type = L1_R
channel-name = L1:CAL-INJ_TRANSIENT_SWSTAT
bitmask-name = INJ_TRANSIENT_INPUT_ON
bitmask = 1024

[check_bitmask-l1_cal_inj_transient_swstat_output]
frame-type = L1_R
channel-name = L1:CAL-INJ_TRANSIENT_SWSTAT
bitmask-name = INJ_TRANSIENT_OUTPUT_ON
bitmask = 4096

; check filterbank on for PCALX-INJ_TRANSIENT

[check_bitmask-l1_cal_pinjx_transient_swstat_input]
frame-type = L1_R
channel-name = L1:CAL-PINJX_TRANSIENT_SWSTAT
bitmask-name = PINJX_TRANSIENT_INPUT_ON
bitmask = 1024

[check_bitmask-l1_cal_pinjx_transient_swstat_output]
frame-type = L1_R
channel-name = L1:CAL-PINJX_TRANSIENT_SWSTAT
bitmask-name = PINJX_TRANSIENT_OUTPUT_ON
bitmask = 4096

; check filterbank on for CAL-INJ_HARDWARE

[check_bitmask-l1_cal_inj_hardware_swstat_input]
frame-type = L1_R
channel-name = L1:CAL-INJ_HARDWARE_SWSTAT
bitmask-name = INJ_HARDWARE_INPUT_ON
bitmask = 1024

[check_bitmask-l1_cal_inj_hardware_swstat_output]
frame-type = L1_R
channel-name = L1:CAL-INJ_HARDWARE_SWSTAT
bitmask-name = INJ_HARDWARE_OUTPUT_ON
bitmask = 4096

; check filterbank on for PCALX-INJ_HARDWARE

[check_bitmask-l1_cal_pinjx_hardware_swstat_input]
frame-type = L1_R
channel-name = L1:CAL-PINJX_HARDWARE_SWSTAT
bitmask-name = PINJX_HARDWARE_INPUT_ON
bitmask = 1024

[check_bitmask-l1_cal_pinjx_hardware_swstat_output]
frame-type = L1_R
channel-name = L1:CAL-PINJX_HARDWARE_SWSTAT
bitmask-name = PINJX_HARDWARE_OUTPUT_ON
bitmask = 4096

; check ODC channel CAL-INJ_ODC_CHANNEL_OUT_DQ

[check_bitmask-l1_odc_cal_inj_cbc]
frame-type = L1_R
channel-name = L1:CAL-INJ_ODC_CHANNEL_OUT_DQ
bitmask-name = ODC_INJ_CBC_BIT_ON
bitmask = 1024
flip-bits =

[check_bitmask-l1_odc_cal_inj_burst]
frame-type = L1_R
channel-name = L1:CAL-INJ_ODC_CHANNEL_OUT_DQ
bitmask-name = ODC_INJ_BURST_BIT_ON
bitmask = 2048
flip-bits =

[check_bitmask-l1_odc_cal_inj_detchar]
frame-type = L1_R
channel-name = L1:CAL-INJ_ODC_CHANNEL_OUT_DQ
bitmask-name = ODC_INJ_DETCHAR_BIT_ON
bitmask = 4096
flip-bits =

[check_bitmask-l1_odc_cal_inj_stochastic]
frame-type = L1_R
channel-name = L1:CAL-INJ_ODC_CHANNEL_OUT_DQ
bitmask-name = ODC_INJ_STOCHASTIC_BIT_ON
bitmask = 8192
flip-bits =

; check ODC channel CAL-PINJX_ODC_CHANNEL_OUT_DQ

[check_bitmask-l1_odc_cal_pinjx_cbc]
frame-type = L1_R
channel-name = L1:CAL-PINJX_ODC_CHANNEL_OUT_DQ
bitmask-name = ODC_PINJX_CBC_BIT_ON
bitmask = 1024
flip-bits =

[check_bitmask-l1_odc_cal_pinjx_burst]
frame-type = L1_R
channel-name = L1:CAL-PINJX_ODC_CHANNEL_OUT_DQ
bitmask-name = ODC_PINJX_BURST_BIT_ON
bitmask = 2048
flip-bits =

[check_bitmask-l1_odc_cal_pinjx_detchar]
frame-type = L1_R
channel-name = L1:CAL-PINJX_ODC_CHANNEL_OUT_DQ
bitmask-name = ODC_PINJX_DETCHAR_BIT_ON
bitmask = 4096
flip-bits =

[check_bitmask-l1_odc_cal_pinjx_stochastic]
frame-type = L1_R
channel-name = L1:CAL-PINJX_ODC_CHANNEL_OUT_DQ
bitmask-name = ODC_PINJX_STOCHASTIC_BIT_ON
bitmask = 8192
flip-bits =

; check state_vector from DCS-CALIB_STATE_VECTOR_C01

[check_bitmask-l1_gds_calib_state_vector_stochastic_c01]
frame-type = L1_HOFT_C01
channel-name = L1:DCS-CALIB_STATE_VECTOR_C01
bitmask-name = STATE_VECTOR_STOCHASTIC_BIT_ON_C01
bitmask = 32
flip-bits =

[check_bitmask-l1_gds_calib_state_vector_cbc_c01]
frame-type = L1_HOFT_C01
channel-name = L1:DCS-CALIB_STATE_VECTOR_C01
bitmask-name = STATE_VECTOR_CBC_BIT_ON_C01
bitmask = 64
flip-bits =

[check_bitmask-l1_gds_calib_state_vector_burst_c01]
frame-type = L1_HOFT_C01
channel-name = L1:DCS-CALIB_STATE_VECTOR_C01
bitmask-name = STATE_VECTOR_BURST_BIT_ON_C01
bitmask = 128
flip-bits =

[check_bitmask-l1_gds_calib_state_vector_detchar_c01]
frame-type = L1_HOFT_C01
channel-name = L1:DCS-CALIB_STATE_VECTOR_C01
bitmask-name = STATE_VECTOR_DETCHAR_BIT_ON_C01
bitmask = 256
flip-bits =

[check_segdb]
; check segment database section
database-url = https://segments.ligo.org

[check_segdb-l1_dmt_analysis_ready]
segment-name = L1:DMT-ANALYSIS_READY:1

[check_segdb-l1_odc_injection_cbc]
segment-name = L1:ODC-INJECTION_CBC:2

[check_segdb-l1_odc_injection_burst]
segment-name = L1:ODC-INJECTION_BURST:2

[check_segdb-l1_odc_injection_stochastic]
segment-name = L1:ODC-INJECTION_STOCHASTIC:2

[check_segdb-l1_odc_injection_detchar]
segment-name = L1:ODC-INJECTION_DETCHAR:2

[cat_frame_data]
; cat excitations and bitmasks to a single file section

[cat_segdb_data]
; cat segments to a single file section

[make_table]
; make html table section

