#! /usr/bin/env python

import argparse
import os
from glue import segments
from jinja2 import Environment, FileSystemLoader

class HardwareInjection(object):
    def __init__(self, ifo):

        self.ifo = ifo

        self.exc_dict = segments.segmentlistdict()

        self.seg_dict = segments.segmentlistdict()

        self.odc_dict = segments.segmentlistdict()

        self.vector_dict = segments.segmentlistdict()

        self.gracedb_id = []
        self.gracedb_time = []

        self.schedule_time = None
        self.schedule_type = None
        self.schedule_scale_factor = None
        self.schedule_prefix = None

    def __repr__(self):
        return " ".join(map(str, [self.ifo, self.gracedb_id, self.gracedb_time,
                        self.exc_dict, self.seg_dict,
                        self.schedule, self.schedule_time]))

    @property
    def obs_mode(self):
        try:
            if self.seg_dict[self.ifo + ":" + opts.observation_mode_segment_flag]:
                return True
        except KeyError:
            return False

    @property
    def scheduled(self):
        if self.schedule_time:
            return True
        else:
            return False

    @property
    def schedule_entry(self):
        return " ".join(map(str, [self.schedule_time, self.schedule_type,
                                  self.schedule_scale_factor, self.schedule_prefix]))

    @property
    def inj_seg(self):
        tmp_list = segments.segmentlist([])
        for seg in self.exc_dict.values():
            tmp_list.append(seg)
        for seg in self.seg_dict.values():
            tmp_list.append(seg)
        for seg in self.odc_dict.values():
            tmp_list.append(seg)
        for seg in self.vector_dict.values():
            tmp_list.append(seg)
        tmp_list.coalesce()
        return tmp_list

# command line usage
parser = argparse.ArgumentParser(usage="pycbc_make_cal_workflow [--options]",
                                 description="Workflow generator for adjusting calibration model.")

# command line options
parser.add_argument("--start-time", type=int, required=True,
                    help="")
parser.add_argument("--end-time", type=int, required=True,
                    help="")
parser.add_argument("--observation-mode-segment-flag", type=str, default="DMT-ANALYSIS_READY:1",
                    help="")
parser.add_argument("--html-template", type=str, default="templates/hwinj_table.html",
                    help="")
parser.add_argument("--output-file", type=str, required=True,
                    help="")
parser.add_argument("--segment-file", type=str, required=True,
                    help="")
parser.add_argument("--excitation-file", type=str, required=True,
                    help="")
parser.add_argument("--odc-file", type=str, required=True,
                    help="")
parser.add_argument("--state-vector-file", type=str, required=True,
                    help="")
parser.add_argument("--gracedb-file", type=str, required=True,
                    help="")
parser.add_argument("--schedule-file", type=str, required=True,
                    help="")

# parse command line
opts = parser.parse_args()

##### setup

# create a list to hold all the hardware injections
hwinj_list = []

# create lists to hold all segment and channel names
exc_names = []
seg_names = []
odc_names = []
vector_names = []

# time of analysis
analysis_time = segments.segment(opts.start_time, opts.end_time)

##### check_exc

# read excitation channel segments
fp = open(opts.excitation_file, "r")
lines = fp.readlines()
fp.close()

# loop over excitations found
for line in lines:

    # get segment from line
    data = line.replace("\n", "").split(",")
    channel_name = data[0]
    ifo = channel_name.split(":")[0]
    seg = segments.segment(float(data[1]), float(data[2]))
    channel_flag = channel_name[3:]

    # add to list of names if not already there
    if channel_flag not in exc_names:
        exc_names.append(channel_flag)

    # create a HardwareInjection and append to the list
    if seg in analysis_time:
        hwinj = HardwareInjection(ifo)
        hwinj.exc_dict[channel_flag] = seg
        hwinj_list.append(hwinj)

##### check_segdb

# read segdb segments
fp = open(opts.segment_file, "r")
lines = fp.readlines()
fp.close()

# loop over CBC injection segments
tmp_list = []
for line in lines:

    # get segment from line
    data = line.replace("\n", "").split(",")
    segment_name = data[0]
    ifo = segment_name.split(":")[0]
    seg = segments.segment(float(data[1]), float(data[2]))
    segment_flag = segment_name[3:]

    # add to list of names if not already there
    if segment_flag not in seg_names:
        seg_names.append(segment_flag)

    # check if CBC injection flag
    match_found = False
    for hwinj in hwinj_list:
        if hwinj.ifo == ifo and hwinj.inj_seg.intersects_segment(seg):
            hwinj.seg_dict[segment_flag] = seg
            match_found = True
            break

    # if there was no corresponding HardwareInjection then make one 
    if not match_found and seg in analysis_time:
        hwinj = HardwareInjection(ifo)
        hwinj.seg_dict[segment_flag] = seg
        tmp_list.append(hwinj)

# add new HardwareInjection to list
hwinj_list = hwinj_list + tmp_list

##### check_odc

# read ODC segments
fp = open(opts.odc_file, "r")
lines = fp.readlines()
fp.close()

# loop over ODC segments
tmp_list = []
for line in lines:

    # get segment from line
    data = line.replace("\n", "").split(",")
    channel_name = data[0]
    bitmask_name = data[1]
    ifo = channel_name.split(":")[0]
    seg = segments.segment(float(data[3]), float(data[4]))

    # add to list of names if not already there
    if bitmask_name not in odc_names:
        odc_names.append(bitmask_name)

    # check if injection exists
    match_found = False
    for hwinj in hwinj_list:
        if hwinj.ifo == ifo and hwinj.inj_seg.intersects_segment(seg):
            hwinj.odc_dict[bitmask_name] = seg
            match_found = True
            break

    # if there was no corresponding HardwareInjection then make one 
    if not match_found and seg in analysis_time:
        hwinj = HardwareInjection(ifo)
        hwinj.odc_dict[bitmask_name] = seg
        tmp_list.append(hwinj)

# add new HardwareInjection to list
hwinj_list = hwinj_list + tmp_list

##### check_vector

# read state vector segments
fp = open(opts.state_vector_file, "r")
lines = fp.readlines()
fp.close()

# loop over vector segments
tmp_list = []
for line in lines:

    # get segment from line
    data = line.replace("\n", "").split(",")
    channel_name = data[0]
    bitmask_name = data[1]
    ifo = channel_name.split(":")[0]
    seg = segments.segment(float(data[3]), float(data[4]))

    # add to list of names if not already there
    if bitmask_name not in vector_names:
        vector_names.append(bitmask_name)

    # check if injection exists
    match_found = False
    for hwinj in hwinj_list:
        if hwinj.ifo == ifo and hwinj.inj_seg.intersects_segment(seg):
            hwinj.vector_dict[bitmask_name] = seg
            match_found = True
            break

    # if there was no corresponding HardwareInjection then make one 
    if not match_found and seg in analysis_time:
        hwinj = HardwareInjection(ifo)
        hwinj.vector_dict[bitmask_name] = seg
        tmp_list.append(hwinj)

# add new HardwareInjection to list
hwinj_list = hwinj_list + tmp_list

##### check_schedule

# read schedule file
fp = open(opts.schedule_file, "r")
lines = fp.readlines()
fp.close()
schedule = [line.split() for line in lines]

# loop over entries in schedule
tmp_list = []
for entry in schedule:

    # check if schedule
    match_found = False
    for hwinj in hwinj_list:
        if float(entry[0]) in hwinj.inj_seg.protract(120):
            hwinj.schedule_time = int(entry[0])
            hwinj.schedule_type = int(entry[1])
            hwinj.schedule_scale_factor = float(entry[2])
            hwinj.schedule_prefix = entry[3]
            match_found = True

    # if there was no corresponding HardwareInjection then make one 
    if not match_found and float(entry[0]) in analysis_time:
        hwinj = HardwareInjection("H1")
        hwinj.schedule_time = int(entry[0])
        hwinj.schedule_type = int(entry[1])
        hwinj.schedule_scale_factor = float(entry[2])
        hwinj.schedule_prefix = entry[3]
        tmp_list.append(hwinj)

# add new HardwareInjection to list
hwinj_list = hwinj_list + tmp_list

##### check_gracedb

# read gracedb triggers
gracedb_trigs = []
fp = open(opts.gracedb_file, "r")
lines = fp.readlines()
gracedb_trigs = [line.replace("\n", "").split(",") for line in lines]

# loop over gracedb triggers
tmp_list = []
for trig in gracedb_trigs:

    # check if gracedb trigger
    match_found = None
    for hwinj in hwinj_list:
        if hwinj.inj_seg:
            if trig[3] == hwinj.ifo and trig[2] == "HardwareInjection" \
               and float(trig[1]) in hwinj.inj_seg.protract(120):
                hwinj.gracedb_id.append(trig[0])
                hwinj.gracedb_time.append(float(trig[1]))
                match_found = True

    # if there was no corresponding HardwareInjection then make one 
    if not match_found and trig[0].startswith("H") and trig[-1] == "H1" and float(trig[1]) in analysis_time:
        hwinj = HardwareInjection("H1")
        hwinj.gracedb_id.append(trig[0])
        hwinj.gracedb_time.append(float(trig[1]))
        tmp_list.append(hwinj)

# add new HardwareInjection to list
hwinj_list = hwinj_list + tmp_list

##### output

# render template
template_dir = os.path.dirname(opts.html_template)
template_filename = os.path.basename(opts.html_template)
env = Environment(loader=FileSystemLoader(template_dir))
env.globals.update(len=len)
env.globals.update(zip=zip)
template = env.get_template(template_filename)
context = {"analysis_time" : analysis_time,
           "hwinj_list" : hwinj_list,
           "exc_names" : exc_names,
           "seg_names" : seg_names,
           "odc_names" : odc_names,
           "vector_names" : vector_names}
html_output = template.render(context)

# write output
with open(opts.output_file, "w") as fp:
    fp.write(html_output)

