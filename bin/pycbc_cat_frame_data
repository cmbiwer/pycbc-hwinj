#! /usr/bin/env python

import argparse
from glue import segments
from pycbc_hwinj.io import read_entry

# command line usage
parser = argparse.ArgumentParser(usage="pycbc_cat_frame_data [--options]",
                                 description="Merge entries into a single file.")

# command line options
parser.add_argument("--input-files", type=str, nargs="+", required=True,
                    help="Input CSV files to read.")
parser.add_argument("--output-file", type=str, required=True,
                    help="Output file to write.")
parser.add_argument("--pad-seconds", type=float, default=0.0,
                    help="Seconds to protract and the contract segmentlist.")

# parse command line
opts = parser.parse_args()

# create a dict to hold all entries
entries_dict = {}

# loop over input files
for path in opts.input_files:

    # read input file
    fp = open(path, "rb")
    lines = fp.readlines()
    fp.close()

    # loop over lines
    for line in lines:

       # read line
       if len(line):
           line = line.rstrip("\n")
           entry = read_entry(line)

           # add entry to dict
           if entry.description not in entries_dict.keys():
               entries_dict[entry.description] = entry
           else:
               entries_dict[entry.description].segmentlist += entry.segmentlist

# set couple sample points protacting than contracting in seconds
# while the segmentlist is coalesce
for key in entries_dict.keys():
    entries_dict[key].segmentlist.protract(opts.pad_seconds)
    entries_dict[key].segmentlist.coalesce()
    entries_dict[key].segmentlist.contract(opts.pad_seconds)

# write output file
fp = open(opts.output_file, "w")
for key in entries_dict.keys():
    fp.write(entries_dict[key].write() + "\n")
fp.close()
